{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","App_Gif","React","Component","Gif","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","list","name","value","currentIndex","index","now","Date","tick","time","_this2","num","timer","setInterval","setState","parseFloat","clearInterval","_this3","el","map","item","key","style","background","onClick","handle","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEMA,0LAmBF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,4BACAH,EAAAC,EAAAC,cAACE,EAAD,eAvBQC,IAAMC,YA6BlBC,cACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAM,CACTC,KAAK,CACH,CAACC,KAAK,eAAKC,MAAM,GACjB,CAACD,KAAK,eAAKC,MAAM,GACjB,CAACD,KAAK,eAAKC,MAAM,GACjB,CAACD,KAAK,eAAKC,MAAM,GACjB,CAACD,KAAK,eAAKC,MAAM,GACjB,CAACD,KAAK,eAAKC,MAAM,GACjB,CAACD,KAAK,UAAKC,MAAM,GACjB,CAACD,KAAK,WAAMC,MAAM,GAClB,CAACD,KAAK,gBAAMC,MAAM,IAEpBC,aAAa,GAdCX,sEAkBXY,GACL,GAAW,IAARA,EAAH,CACA,IAAIC,GAAM,IAAIC,KACdX,KAAKY,KAAK,GAAGF,iCAEVG,EAAKH,GAAI,IAAAI,EAAAd,KACRe,EAAK,EACTf,KAAKgB,MAAOC,YAAY,WACtBH,EAAKI,SAAS,CACZV,aAAaO,MAEN,IAANA,IACDA,EAAM,GAEFI,aAAa,IAAIR,KAAOD,GAAK,KAC9B,GACHU,cAAcN,EAAKE,QAWpBH,oCAEG,IAAAQ,EAAArB,KAEFsB,EADQtB,KAAKI,MAAMC,KACPkB,IAAI,SAAAC,GAAI,OACxBpC,EAAAC,EAAAC,cAAA,OAAKmC,IAAKD,EAAKjB,MAAOhB,UAAU,MAAMmC,MAAO,CAACC,WAAaH,EAAKjB,QAAQc,EAAKjB,MAAMI,aAAgB,SAAW,QAASoB,QAAS,kBAAIP,EAAKQ,OAAOL,EAAKjB,SACpJiB,EAAKlB,QACN,OAAQlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAO+B,UArDhB7B,IAAMC,WAwDTP,IC3EK2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2a55520e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nclass App extends React.Component{\n  // constructor(props){\n  //   super(props);\n  //   this.state={\n  //     list:[\n  //       {name:'房子',value:1},\n  //       {name:'车子',value:2},\n  //       {name:'鲜花',value:3},\n  //       {name:'口红',value:4},\n  //       {name:'开始',value:0},\n  //       {name:'包包',value:5},\n  //       {name:'5块',value:6},\n  //       {name:'10块',value:7},\n  //       {name:'1万块',value:8},\n  //     ],\n  //     currentIndex:1\n  //   }\n  // }\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className='title'>七夕礼物</div>\n          <Gif />\n        </header>\n      </div>\n    );\n  }\n}\nclass Gif extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      list:[\n        {name:'房子',value:1},\n        {name:'车子',value:2},\n        {name:'鲜花',value:3},\n        {name:'衣服',value:8},\n        {name:'开始',value:0},\n        {name:'包包',value:4},\n        {name:'5块',value:7},\n        {name:'10块',value:6},\n        {name:'1万块',value:5},\n      ],\n      currentIndex:1\n    }\n    // this.handle = this.handle.bind(this)\n  }\n  handle(index){\n    if(index!==0)return;\n    let now =+new Date()\n    this.tick(50,now)\n  }\n  tick(time,now){\n    let num =1;\n    this.timer =setInterval(() => {\n      this.setState({\n        currentIndex:num++\n      })\n      if(num===9){\n        num = 1;\n      }\n      let t=parseFloat((+new Date()-now)/1000);\n      if(t>4){\n        clearInterval(this.timer)\n        // this.tick(100,+new Date())\n      }\n      // if(t>5){\n      //   clearInterval(this.timer)\n      //   this.tick(500,+new Date())\n      // }\n      // if(t>8){\n      //   clearInterval(this.timer)\n      //   // this.tick(1000,+new Date())\n      // }\n    }, time);\n  }\n  render(){\n    let allGif =this.state.list\n    let el = allGif.map(item=>\n    <div key={item.value} className='one' style={{background: (item.value===this.state.currentIndex) ? \"yellow\" : \"#FFF\"}} onClick={()=>this.handle(item.value)}>\n    {item.name}</div>)\n    return (<div className=\"box\">{el}</div>)\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}